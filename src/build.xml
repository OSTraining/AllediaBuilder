<?xml version="1.0" encoding="UTF-8"?>
<project name="Alledia Joomla Phing Builder" default="build">
    <property name="builder.version" value="3.0.13"/>

    <!-- Display basic information -->
    <echo message="Version ${builder.version} for Joomla! extensions"/>

    <!-- Include the external tasks -->
    <includepath classpath="${builder.path}/src/tasks"/>
    <taskdef name="propertiesfromcomposer" classname="PropertiesFromComposerTask"/>
    <taskdef name="setversion" classname="SetversionTask"/>
    <taskdef name="checkbranch" classname="CheckBranchTask"/>
    <taskdef name="mergefiles" classname="MergeFilesTask"/>
    <taskdef name="getrelatedextensions" classname="RelatedExtensionsTask"/>

    <!-- Properties -->
    <!-- Try to get the project path from the build.properties, for deployment environment -->
    <if>
        <not>
            <isset property="project.path"/>
        </not>
        <then>
            <property name="project.path" value="${project.basedir}"/>
        </then>
    </if>

    <propertiesfromcomposer file="${project.path}/composer.json"/>

    <property name="project.source.path" value="${project.path}/src"/>
    <property name="project.name.short" value="${composer.extra.element-short}"/>
    <property name="project.name.long" value="${composer.extra.element}"/>

    <!-- Set the free extension path -->
    <if>
        <equals arg1="${composer.extra.package-license}" arg2="pro"/>
        <then>
            <if>
                <isset property="project.${composer.extra.name}.path"/>
                <then>
                    <property name="project.free.source.path" value="${project.${composer.extra.name}.path}/src"/>
                </then>
                <else>
                    <fail message="Missed project.${composer.extra.name}.path property"/>
                </else>
            </if>
        </then>
        <else>
            <property name="project.free.source.path" value="${project.source.path}"/>
        </else>
    </if>

    <!-- Check if we are building the package directly or as a related extension -->
    <!-- If it is a related extension, we will receive these properties from the command line -->
    <if>
        <not>
            <isset property="packages.tmp.path"/>
        </not>
        <then>
            <!-- We are building the package directly -->
            <property name="packages.path" value="${project.path}/packages"/>
            <property name="packages.tmp.path" value="${packages.path}/tmp"/>
            <property name="buildingdirectly" value="1"/>
        </then>
        <else>
            <property name="buildingdirectly" value="0"/>
        </else>
    </if>

    <!-- Parse the manifest file and get properties -->
    <property name="project.manifest" value="${project.source.path}/${project.name.short}.xml"/>
    <if>
        <available file="${project.manifest}" property="project.manifest.exists"/>
        <then/>
        <else>
            <property name="project.manifest" value="${project.source.path}/${project.type}_${project.name.short}.xml" override="true"/>
        </else>
    </if>
    <xmlproperty file="${project.manifest}" prefix="manifest" keepRoot="false" />

    <getrelatedextensions file="${project.manifest}" property="project.relatedExtensions" ignoreRelatedExtensions="${ignoreRelatedExtensions}"/>

    <import file="${builder.path}/src/projects/development.xml"/>
    <import file="${builder.path}/src/projects/release.xml"/>
    <import file="${builder.path}/src/projects/symlinker.xml"/>
</project>
