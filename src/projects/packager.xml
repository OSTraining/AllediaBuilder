<?xml version="1.0" encoding="UTF-8"?>
<project name="Packager" default="build">

    <!-- Create New Release and package -->
    <target name="build-new" description="Update version/creation and create IDed package" depends="set-new-version">
        <if>
            <isset property="release.type"/>
            <then>
                <setversion releasetype="${release.type}" file="${project.manifest}" property="manifest.version"/>
                <phingcall target="update-creation"/>

                <phingcall target="package">
                    <property name="package.file" value="${project.name.long}_${composer.extra.package-license}_${manifest.version}.zip"/>
                </phingcall>
            </then>
        </if>
    </target>

    <!-- Update version number without build -->
    <target name="version" description="Update version/creation and create IDed package" depends="set-new-version">
        <if>
            <isset property="release.type"/>
            <then>
                <setversion releasetype="${release.type}" file="${project.manifest}" property="manifest.version"/>
                <phingcall target="update-creation"/>
            </then>
        </if>
    </target>

    <!-- Create New Release and package for development -->
    <target name="build-dev" description="Update version/creation and create IDed package with build number">
        <property name="release.type" value="BUILD" override="true"/>
        <setversion releasetype="${release.type}" file="${project.manifest}" property="manifest.version"/>
        <phingcall target="update-creation"/>

        <phingcall target="package">
            <property name="package.file" value="${project.name.long}_${composer.extra.package-license}_${manifest.version}.zip"/>
        </phingcall>
    </target>

    <!-- Create Current Release and package -->
    <target name="build" description="Generate package file for current version">
        <property name="manifest.version" value="0.0.0" override="false"/>
        <phingcall target="package">
            <property name="package.file" value="${project.name.long}_${composer.extra.package-license}_${manifest.version}.zip"/>
        </phingcall>
    </target>

    <!-- Pack the extension into a project -->
    <target name="pack-related-extensions">
        <if>
            <not>
                <contains string="${extension}" substring="${"/>
            </not>
            <then>
                <echo>Packing the related extension: ${extension}</echo>

                <property name="extensions.tmp.path" value="${packages.tmp.path}/extensions"/>

                <!-- Do we have this extension pre-packed? -->
                <if>
                    <available file="${extensions.tmp.path}/${extension}" type="dir" />
                    <then>
                        <echo>The extension ${extension} is pre-packed. Ignoring...</echo>
                    </then>
                    <else>
                        <!-- Is the extension path set? -->
                        <property name="extension.path" value="${project.${extension}.path}"/>

                        <if>
                            <contains string="${extension.path}" substring="${"/>
                            <then>
                                <fail message="Missed related extension path property: project.${extension}.path"/>
                            </then>
                        </if>

                        <!-- Make sure we have the main extensions folder -->
                        <if>
                            <not>
                                <available file="${extensions.tmp.path}" type="dir" />
                            </not>
                            <then>
                                <mkdir dir="${extensions.tmp.path}"/>
                            </then>
                        </if>

                        <!-- Run the related extension phing script -->
                        <mkdir dir="${extensions.tmp.path}/${extension}"/>
                        <exec command="phing -f ${extension.path}/build.xml build -Dpackages.tmp.path=${extensions.tmp.path}/${extension} -DignoreRelatedExtensions=${project.relatedExtensions} -logger phing.listener.DefaultLogger" logoutput="true" checkreturn="true"/>
                    </else>
                </if>
            </then>
        </if>
    </target>

    <!-- Pack the includes into a project -->
    <target name="pack-includes">
        <if>
            <not>
                <contains string="${include}" substring="${"/>
            </not>
            <then>
                <echo>Packing the include: ${include}</echo>

                <!-- Is the include path set? -->
                <property name="include.path" value="${project.${include}.path}"/>

                <if>
                    <contains string="${include.path}" substring="${"/>
                    <then>
                        <fail message="Missed include path property: project.${include}.path"/>
                    </then>
                </if>

                <!-- Check if we have a custom source for this include. If not, use src/ -->
                <if>
                    <contains string="${project.includes.${include}.source}" substring="${"/>
                    <then>
                        <property name="project.includes.${include}.source" value="src/" override="true" />
                    </then>
                </if>

                <!-- Check if we have a custom destination for this include -->
                <if>
                    <contains string="${project.includes.${include}.destination}" substring="${"/>
                    <then>
                        <property name="project.includes.${include}.destination" value="" override="true" />
                    </then>
                </if>

                <!-- Run the include phing script -->
                <exec command="phing -f ${include.path}/build.xml copy -Dpackages.tmp.path=${packages.tmp.path}/${project.includes.${include}.destination} -logger phing.listener.DefaultLogger -Dproject.type=${project.type} -Dinclude.source=${project.includes.${include}.source}" logoutput="true" checkreturn="true"/>
            </then>
        </if>
    </target>

    <!-- Create Package without identifying version info -->
    <target name="package">
        <property name="package.path" value="${packages.path}/${package.file}"/>

        <!-- Remove the package, if exists -->
        <available file="${package.path}" property="package.path.exists" value="1"/>
        <if>
            <equals arg1="${package.path.exists}" arg2="1"/>
            <then>
                <delete file="${packages.path}/${package.file}"/>
            </then>
        </if>

        <!-- Prepare the packages temporary folders -->
        <if>
            <available file="${packages.tmp.path}" type="dir"/>
            <then>
                <delete dir="${packages.tmp.path}"/>
            </then>
        </if>
        <mkdir dir="${packages.tmp.path}"/>

        <!-- Copy the installer library, if there is a custom installer script -->
        <if>
            <isset property="manifest.scriptfile"/>
            <then>
                <!-- Check if the installer library path is set -->
                <if>
                    <contains string="${project.AllediaInstaller.path}" substring="${"/>
                    <then>
                        <fail message="Missed the project.AllediaInstaller.path property"/>
                    </then>
                </if>

                <property name="installer.source.path" value="${project.AllediaInstaller.path}/src"/>

                <if>
                    <equals arg1="${composer.type}" arg2="joomla.component"/>
                    <then>
                        <property name="installer.tmp.path" value="${packages.tmp.path}/admin"/>
                    </then>
                    <else>
                        <property name="installer.tmp.path" value="${packages.tmp.path}"/>
                    </else>
                </if>

                <copy todir="${installer.tmp.path}">
                    <fileset dir="${installer.source.path}" id="installer-code">
                        <include name="**"/>
                        <exclude name="media/**"/>
                    </fileset>
                </copy>

                <!-- Installer media - it is separated because componentes use admin/site subfolders folders -->
                <copy todir="${packages.tmp.path}/media">
                    <fileset dir="${installer.source.path}/media" id="installer-media-code">
                        <include name="**"/>
                    </fileset>
                </copy>
            </then>
        </if>

        <!-- Copy the resources specified by the include tag -->
        <if>
            <istrue value="${capabilities.parallel}"/>
            <then>
                <foreach_parallel list="${project.includes}" param="include" target="pack-includes" delimiter="," threadCount="${builder.thread.count}" />
            </then>
            <else>
                <foreach list="${project.includes}" param="include" target="pack-includes" delimiter="," />
            </else>
        </if>

        <!-- Copy the free source folder to a temporary location -->
        <if>
           <equals arg1="${project.hasFreeVersion}" arg2="1"/>
           <then>
                <copy todir="${packages.tmp.path}" overwrite="true">
                    <fileset dir="${project.free.source.path}" id="free-code">
                        <include name="**"/>
                    </fileset>
                </copy>
           </then>
        </if>

        <!-- Pro extensions -->
        <if>
            <equals arg1="${composer.extra.package-license}" arg2="pro"/>
            <then>

                <!-- Copy the pro source overriding the existent free code -->
                <copy todir="${packages.tmp.path}" overwrite="true">
                    <fileset dir="${project.source.path}" id="pro-code">
                        <include name="**"/>
                    </fileset>
                </copy>

                <!-- Merge language files -->
                <if>
                    <equals arg1="${composer.type}" arg2="joomla.component"/>
                    <then>
                        <if>
                            <available file="${packages.tmp.path}/admin/language/en-GB" type="dir" />
                            <then>
                                <mergefiles basepath="${packages.tmp.path}/admin/language/en-GB" pattern=".pro." replace="."/>
                            </then>
                        </if>

                        <if>
                            <available file="${packages.tmp.path}/site/language/en-GB" type="dir" />
                            <then>
                                <mergefiles basepath="${packages.tmp.path}/site/language/en-GB" pattern=".pro." replace="."/>
                            </then>
                        </if>
                    </then>
                    <else>
                        <mergefiles basepath="${packages.tmp.path}/language/en-GB" pattern=".pro." replace="."/>
                    </else>
                </if>
            </then>
        </if>

        <!-- Pack related extensions -->
        <if>
            <istrue value="${capabilities.parallel}"/>
            <then>
                <foreach_parallel list="${project.relatedExtensions}" param="extension" target="pack-related-extensions" delimiter="," threadCount="${builder.thread.count}" />
            </then>
            <else>
                <foreach list="${project.relatedExtensions}" param="extension" target="pack-related-extensions" delimiter="," />
            </else>
        </if>

        <!-- PHP Lint -->
        <phplint haltonfailure="true">
            <fileset dir="${packages.tmp.path}">
                <include name="**/*.php"/>
            </fileset>
        </phplint>

        <if>
            <equals arg1="${buildingdirectly}" arg2="1"/>
            <then>
                <!-- Pack the tmp folder -->
                <zip destfile="${packages.path}/${package.file}" includeemptydirs="true" basedir="${packages.tmp.path}"/>

                <!-- Remove tmp folder -->
                <if>
                    <not>
                        <equals arg1="${debug}" arg2="1"/>
                    </not>
                    <then>
                        <delete dir="${packages.tmp.path}"/>
                    </then>
                </if>
            </then>
        </if>

        <!-- Show what are the branches are being used for each sub project -->
        <if>
            <equals arg1="${buildingdirectly}" arg2="1" />
            <then>
                <if>
                    <equals arg1="${composer.extra.package-license}" arg2="pro"/>
                    <then>
                        <property name="projects" value="AllediaBuilder,${composer.extra.name},${composer.extra.name}-Pro" override="true"/>
                        <property name="project.${composer.extra.name}-Pro.path" value="${project.path}" />
                    </then>
                    <else>
                        <property name="projects" value="AllediaBuilder,${composer.extra.name}" override="true"/>
                        <property name="project.${composer.extra.name}.path" value="${project.path}" />
                    </else>
                </if>
                <!-- Inject the installer on the projects property, if needed -->
                <if>
                    <isset property="manifest.scriptfile"/>
                    <then>
                        <property name="projects" value="AllediaInstaller,${projects}" override="true"/>
                    </then>
                </if>

                <property name="project.AllediaBuilder.path" value="${builder.path}" />

                <phingcall target="show-branches">
                    <property name="projects" value="${projects},${project.relatedExtensions},${project.includes}" />
                </phingcall>
            </then>
        </if>

    </target>

    <!-- Update creation date in Joomla manifest file -->
    <target name="update-creation">
        <tstamp prefix="creation"/>

        <property name="creation.find" value=""><![CDATA[<creationDate>.*</creationDate>]]></property>
        <property name="creation.replace" value=""><![CDATA[<creationDate>${creation.TODAY}</creationDate>]]></property>
        <reflexive file="${project.manifest}">
            <filterchain>
                <replaceregexp>
                    <!--suppress PhingDomInspection -->
                    <regexp pattern="${creation.find}" replace="${creation.replace}"/>
                </replaceregexp>
            </filterchain>
        </reflexive>
        <echo message="Creation Date: ${creation.TODAY}"/>
    </target>

    <target name="set-new-version" hidden="true">
        <echo><![CDATA[
            1. Major
            2. Minor
            3. Bugfix
            4. Build
        ]]></echo>
        <input
            propertyName="release.id"
            validArgs="0, 1, 2, 3, 4"
            message="Release Type: "/>

        <if>
            <equals arg1="${release.id}" arg2="1"/>
            <then>
                <property name="release.type" value="major"/>
            </then>
            <elseif>
                <equals arg1="${release.id}" arg2="2"/>
                <then>
                    <property name="release.type" value="minor"/>
                </then>
            </elseif>
            <elseif>
                <equals arg1="${release.id}" arg2="3"/>
                <then>
                    <property name="release.type" value="bugfix"/>
                </then>
            </elseif>
            <elseif>
                <equals arg1="${release.id}" arg2="4"/>
                <then>
                    <property name="release.type" value="build"/>
                </then>
            </elseif>
        </if>
    </target>

    <target name="show-branches">
        <showbranches projects="${projects}"/>
    </target>
</project>
